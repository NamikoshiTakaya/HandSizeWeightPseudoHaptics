library(ggplot2)

# データの準備
handsize <- c(0.4, 0.6, 0.8, 1.25, 1.5, 1.75)

# HeavyGain0.8 のデータ (平均データ)
response_rate_0.8 <- c(71.05263158,77.63157895,82.01754386,93.42105263,94.73684211,96.49122807)

# HeavyGain1.2 のデータ (平均データ)
response_rate_1.2 <- c(4.385964912,7.894736842,6.140350877,17.98245614,32.89473684,49.56140351)

# 参加者A_0.8 のデータ
response_rate_A_0.8 <- c(16.66666667,50,41.66666667,75,83.33333333,100)

# 参加者A_1.2 のデータ
response_rate_A_1.2 <- c(8.333333333,0,0,33.33333333,58.33333333,91.66666667)

# 参加者B_0.8 のデータ
response_rate_B_0.8 <- c(91.66666667,91.66666667,100,91.66666667,100,91.66666667)

# 参加者B_1.2 のデータ
response_rate_B_1.2 <- c(0,0,0,0,8.333333333,0)


A_0.8  <- c(66.66666667,83.33333333,50,75,83.33333333,91.66666667)
A_1.2  <- c(33.33333333,50,25,25,50,66.66666667)

B_0.8  <- c(75,83.33333333,100,83.33333333,91.66666667,100)
B_1.2  <- c(0,0,0,0,0,0)

C_0.8  <- c(50,83.33333333,66.66666667,83.33333333,91.66666667,91.66666667)
C_1.2  <- c(8.333333333,8.333333333,25,8.333333333,41.66666667,50)

D_0.8  <- c(58.33333333,75,75,91.66666667,91.66666667,100)
D_1.2  <- c(0,0,0,25,75,75)

E_0.8  <- c(83.33333333,91.66666667,100,100,100,100)
E_1.2  <- c(0,0,0,0,8.333333333,50)

F_0.8  <- c(91.66666667,91.66666667,100,91.66666667,100,91.66666667)
F_1.2  <- c(0,0,0,0,8.333333333,0)

G_0.8  <- c(8.333333333,0,25,100,100,100)
G_1.2  <- c(0,0,0,75,91.66666667,100)

H_0.8  <- c(100,100,100,91.66666667,91.66666667,100)
H_1.2  <- c(0,8.333333333,0,0,0,25)

I_0.8  <- c(16.66666667,25,25,83.33333333,83.33333333,83.33333333)
I_1.2  <- c(0,8.333333333,8.333333333,58.33333333,83.33333333,91.66666667)

J_0.8  <- c(50,100,83.33333333,100,100,100)
J_1.2  <- c(0,0,0,0,25,66.66666667)

K_0.8  <- c(83.33333333,75,91.66666667,100,91.66666667,100)
K_1.2  <- c(8.333333333,8.333333333,16.66666667,33.33333333,33.33333333,66.66666667)

L_0.8  <- c(16.66666667,50,41.66666667,75,83.33333333,100)
L_1.2  <- c(8.333333333,0,0,33.33333333,58.33333333,91.66666667)

M_0.8  <- c(83.33333333,66.66666667,100,100,100,91.66666667)
M_1.2  <- c(0,0,0,0,8.333333333,25)

N_0.8  <- c(100,100,100,100,100,91.66666667)
N_1.2  <- c(0,0,0,16.66666667,16.66666667,25)

O_0.8  <- c(100,91.66666667,100,100,100,100)
O_1.2  <- c(8.333333333,33.33333333,8.333333333,16.66666667,25,41.66666667)

P_0.8  <- c(66.66666667,75,100,100,91.66666667,100)
P_1.2  <- c(0,0,8.333333333,50,58.33333333,75)

Q_0.8  <- c(100,100,100,100,100,100)
Q_1.2  <- c(8.333333333,8.333333333,0,0,25,25)

R_0.8  <- c(100,100,100,100,100,100)
R_1.2  <- c(8.333333333,0,8.333333333,0,16.66666667,50)

S_0.8  <- c(100,83.33333333,100,100,100,91.66666667)
S_1.2  <- c(0,25,16.66666667,0,0,16.66666667)

T_0.8  <- c(100,91.66666667,66.66666667,100,91.66666667,83.33333333)
T_1.2  <- c(16.66666667,0,25,25,41.66666667,16.66666667)

# プロビット回帰モデルをフィット
fit_0.8 <- glm(response_rate_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit_1.2 <- glm(response_rate_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit_A_0.8 <- glm(response_rate_A_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit_A_1.2 <- glm(response_rate_A_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit_B_0.8 <- glm(response_rate_B_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit_B_1.2 <- glm(response_rate_B_1.2 / 100 ~ handsize, family = binomial(link = "probit"))

fit2_A_0.8 <- glm(A_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_A_1.2 <- glm(A_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_B_0.8 <- glm(B_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_B_1.2 <- glm(B_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_C_0.8 <- glm(C_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_C_1.2 <- glm(C_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_D_0.8 <- glm(D_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_D_1.2 <- glm(D_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_E_0.8 <- glm(E_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_E_1.2 <- glm(E_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_F_0.8 <- glm(F_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_F_1.2 <- glm(F_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_G_0.8 <- glm(G_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_G_1.2 <- glm(G_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_H_0.8 <- glm(H_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_H_1.2 <- glm(H_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_I_0.8 <- glm(I_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_I_1.2 <- glm(I_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_J_0.8 <- glm(J_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_J_1.2 <- glm(J_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_K_0.8 <- glm(K_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_K_1.2 <- glm(K_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_L_0.8 <- glm(L_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_L_1.2 <- glm(L_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_M_0.8 <- glm(M_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_M_1.2 <- glm(M_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_N_0.8 <- glm(N_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_N_1.2 <- glm(N_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_O_0.8 <- glm(O_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_O_1.2 <- glm(O_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_P_0.8 <- glm(P_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_P_1.2 <- glm(P_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_Q_0.8 <- glm(Q_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_Q_1.2 <- glm(Q_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_R_0.8 <- glm(R_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_R_1.2 <- glm(R_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_S_0.8 <- glm(S_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_S_1.2 <- glm(S_1.2 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_T_0.8 <- glm(T_0.8 / 100 ~ handsize, family = binomial(link = "probit"))
fit2_T_1.2 <- glm(T_1.2 / 100 ~ handsize, family = binomial(link = "probit"))


# 1. 平均データ (HeavyGain0.8, HeavyGain1.2)
avg_data <- data.frame(
 handsize = handsize,
 response_rate = c(response_rate_0.8, response_rate_1.2),
 condition = rep(c("Average HeavyGain0.8", "Average HeavyGain1.2"), each = length(handsize))
)

p1 <- ggplot(avg_data, aes(x = handsize, y = response_rate, color = condition, shape = condition)) +
 geom_point(size = 3) +
 stat_function(fun = function(x) pnorm(coef(fit_0.8)[1] + coef(fit_0.8)[2] * x) * 100, aes(color = "Average HeavyGain0.8"), size = 1) +
 stat_function(fun = function(x) pnorm(coef(fit_1.2)[1] + coef(fit_1.2)[2] * x) * 100, aes(color = "Average HeavyGain1.2"), size = 1) +
 scale_y_continuous(limits = c(0, 100)) +
 scale_x_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.2), labels = seq(0, 4, by = 0.2)) + # X軸を0から4、目盛りを0.2刻みに設定
 labs(x = "ハンドサイズ", y = "比較対象を重いと答えた割合[%]") +
 theme_minimal() +
 theme(
  plot.title = element_blank(),
  axis.title.x = element_text(size = 32), # X軸タイトルのフォントサイズ
  axis.title.y = element_text(size = 32), # Y軸タイトルのフォントサイズ
  axis.text.x = element_text(size = 20),  # X軸目盛りのフォントサイズ
  axis.text.y = element_text(size = 20),  # Y軸目盛りのフォントサイズ
  panel.grid.major.x = element_line(size = 0.5), # X軸補助線の表示を有効化
  panel.grid.minor.x = element_line(size = 0.25)  # X軸補助線の表示を有効化
 )

# 2. 参加者Aのデータ (A_0.8, A_1.2)
a_data <- data.frame(
 handsize = handsize,
 response_rate = c(response_rate_A_0.8, response_rate_A_1.2),
 condition = rep(c("ParticipantA_0.8", "ParticipantA_1.2"), each = length(handsize))
)

p2 <- ggplot(a_data, aes(x = handsize, y = response_rate, color = condition, shape = condition)) +
 geom_point(size = 3) +
 stat_function(fun = function(x) pnorm(coef(fit_A_0.8)[1] + coef(fit_A_0.8)[2] * x) * 100, aes(color = "ParticipantA_0.8"), size = 1) +
 stat_function(fun = function(x) pnorm(coef(fit_A_1.2)[1] + coef(fit_A_1.2)[2] * x) * 100, aes(color = "ParticipantA_1.2"), size = 1) +
 scale_y_continuous(limits = c(0, 100)) +
 scale_x_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.2), labels = seq(0, 4, by = 0.2)) + # X軸を0から4、目盛りを0.2刻みに設定
 labs(x = "ハンドサイズ", y = "比較対象を重いと答えた割合[%]") +
 theme_minimal() +
 theme(
  plot.title = element_blank(),
  axis.title.x = element_text(size = 32), # X軸タイトルのフォントサイズ
  axis.title.y = element_text(size = 32), # Y軸タイトルのフォントサイズ
  axis.text.x = element_text(size = 20),  # X軸目盛りのフォントサイズ
  axis.text.y = element_text(size = 20),  # Y軸目盛りのフォントサイズ
  panel.grid.major.x = element_line(size = 0.5), # X軸補助線の表示を有効化
  panel.grid.minor.x = element_line(size = 0.25)  # X軸補助線の表示を有効化
 )

# 3. 参加者Bのデータ (B_0.8, B_1.2)
b_data <- data.frame(
 handsize = handsize,
 response_rate = c(response_rate_B_0.8, response_rate_B_1.2),
 condition = rep(c("ParticipantB_0.8", "ParticipantB_1.2"), each = length(handsize))
)

p3 <- ggplot(b_data, aes(x = handsize, y = response_rate, color = condition, shape = condition)) +
 geom_point(size = 3) +
 stat_function(fun = function(x) pnorm(coef(fit_B_0.8)[1] + coef(fit_B_0.8)[2] * x) * 100, aes(color = "ParticipantB_0.8"), size = 1) +
 stat_function(fun = function(x) pnorm(coef(fit_B_1.2)[1] + coef(fit_B_1.2)[2] * x) * 100, aes(color = "ParticipantB_1.2"), size = 1) +
 scale_y_continuous(limits = c(0, 100)) +
 scale_x_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.2), labels = seq(0, 4, by = 0.2)) + # X軸を0から4、目盛りを0.2刻みに設定
 labs(x = "ハンドサイズ", y = "比較対象を重いと答えた割合[%]") +
 theme_minimal() +
 theme(
  plot.title = element_blank(),
  axis.title.x = element_text(size = 32), # X軸タイトルのフォントサイズ
  axis.title.y = element_text(size = 32), # Y軸タイトルのフォントサイズ
  axis.text.x = element_text(size = 20),  # X軸目盛りのフォントサイズ
  axis.text.y = element_text(size = 20),  # Y軸目盛りのフォントサイズ
  panel.grid.major.x = element_line(size = 0.5), # X軸補助線の表示を有効化
  panel.grid.minor.x = element_line(size = 0.25)  # X軸補助線の表示を有効化
 )

# 4. まとめたデータ (平均、参加者A、参加者B)
all_data <- data.frame(
 handsize = handsize,
 response_rate = c(A_0.8, A_1.2, B_0.8, B_1.2,C_0.8, C_1.2, D_0.8, D_1.2,E_0.8, E_1.2, F_0.8, F_1.2,G_0.8,G_1.2, H_0.8, H_1.2,I_0.8, I_1.2, J_0.8, J_1.2,K_0.8, K_1.2, L_0.8, L_1.2,M_0.8,M_1.2, N_0.8, N_1.2,O_0.8, O_1.2, P_0.8, P_1.2,Q_0.8, Q_1.2, R_0.8, R_1.2,S_0.8, S_1.2, T_0.8, T_1.2),
 condition = rep(c("ParticipantA_0.8", "ParticipantA_1.2", "ParticipantB_0.8", "ParticipantB_1.2","ParticipantC_0.8", "ParticipantC_1.2", "ParticipantD_0.8", "ParticipantD_1.2","ParticipantE_0.8", "ParticipantE_1.2", "ParticipantF_0.8", "ParticipantF_1.2","ParticipantG_0.8", "ParticipantG_1.2", "ParticipantH_0.8", "ParticipantH_1.2","ParticipantI_0.8", "ParticipantI_1.2", "ParticipantJ_0.8", "ParticipantJ_1.2","ParticipantK_0.8", "ParticipantK_1.2", "ParticipantL_0.8", "ParticipantL_1.2","ParticipantM_0.8", "ParticipantM_1.2", "ParticipantN_0.8", "ParticipantN_1.2","ParticipantO_0.8", "ParticipantO_1.2", "ParticipantP_0.8", "ParticipantP_1.2","ParticipantQ_0.8", "ParticipantQ_1.2", "ParticipantR_0.8", "ParticipantR_1.2","ParticipantS_0.8", "ParticipantS_1.2", "ParticipantT_0.8", "ParticipantT_1.2"), each = length(handsize))
)

p4 <- ggplot(all_data, aes(x = handsize, y = response_rate, color = condition, shape = condition)) +
 geom_point(size = 3) +
 # 近似線の追加 (各データに対して)
  stat_function(fun = function(x) pnorm(coef(fit2_A_0.8)[1] + coef(fit_A_0.8)[2] * x) * 100, aes(color = "ParticipantA_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_A_1.2)[1] + coef(fit_A_1.2)[2] * x) * 100, aes(color = "ParticipantA_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_B_0.8)[1] + coef(fit2_B_0.8)[2] * x) * 100, aes(color = "ParticipantB_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_B_1.2)[1] + coef(fit2_B_1.2)[2] * x) * 100, aes(color = "ParticipantB_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_C_0.8)[1] + coef(fit2_C_0.8)[2] * x) * 100, aes(color = "ParticipantC_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_C_1.2)[1] + coef(fit2_C_1.2)[2] * x) * 100, aes(color = "ParticipantC_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_D_0.8)[1] + coef(fit2_D_0.8)[2] * x) * 100, aes(color = "ParticipantD_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_D_1.2)[1] + coef(fit2_D_1.2)[2] * x) * 100, aes(color = "ParticipantD_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_E_0.8)[1] + coef(fit2_E_0.8)[2] * x) * 100, aes(color = "ParticipantE_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_E_1.2)[1] + coef(fit2_E_1.2)[2] * x) * 100, aes(color = "ParticipantE_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_F_0.8)[1] + coef(fit2_F_0.8)[2] * x) * 100, aes(color = "ParticipantF_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_F_1.2)[1] + coef(fit2_F_1.2)[2] * x) * 100, aes(color = "ParticipantF_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_G_0.8)[1] + coef(fit2_G_0.8)[2] * x) * 100, aes(color = "ParticipantG_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_G_1.2)[1] + coef(fit2_G_1.2)[2] * x) * 100, aes(color = "ParticipantG_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_H_0.8)[1] + coef(fit2_H_0.8)[2] * x) * 100, aes(color = "ParticipantH_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_H_1.2)[1] + coef(fit2_H_1.2)[2] * x) * 100, aes(color = "ParticipantH_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_I_0.8)[1] + coef(fit2_I_0.8)[2] * x) * 100, aes(color = "ParticipantI_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_I_1.2)[1] + coef(fit2_I_1.2)[2] * x) * 100, aes(color = "ParticipantI_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_J_0.8)[1] + coef(fit2_J_0.8)[2] * x) * 100, aes(color = "ParticipantJ_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_J_1.2)[1] + coef(fit2_J_1.2)[2] * x) * 100, aes(color = "ParticipantJ_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_K_0.8)[1] + coef(fit2_K_0.8)[2] * x) * 100, aes(color = "ParticipantK_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_K_1.2)[1] + coef(fit2_K_1.2)[2] * x) * 100, aes(color = "ParticipantK_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_L_0.8)[1] + coef(fit2_L_0.8)[2] * x) * 100, aes(color = "ParticipantL_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_L_1.2)[1] + coef(fit2_L_1.2)[2] * x) * 100, aes(color = "ParticipantL_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_M_0.8)[1] + coef(fit2_M_0.8)[2] * x) * 100, aes(color = "ParticipantM_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_M_1.2)[1] + coef(fit2_M_1.2)[2] * x) * 100, aes(color = "ParticipantM_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_N_0.8)[1] + coef(fit2_N_0.8)[2] * x) * 100, aes(color = "ParticipantN_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_N_1.2)[1] + coef(fit2_N_1.2)[2] * x) * 100, aes(color = "ParticipantN_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_O_0.8)[1] + coef(fit2_O_0.8)[2] * x) * 100, aes(color = "ParticipantO_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_O_1.2)[1] + coef(fit2_O_1.2)[2] * x) * 100, aes(color = "ParticipantO_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_P_0.8)[1] + coef(fit2_P_0.8)[2] * x) * 100, aes(color = "ParticipantP_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_P_1.2)[1] + coef(fit2_P_1.2)[2] * x) * 100, aes(color = "ParticipantP_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_Q_0.8)[1] + coef(fit2_Q_0.8)[2] * x) * 100, aes(color = "ParticipantQ_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_Q_1.2)[1] + coef(fit2_Q_1.2)[2] * x) * 100, aes(color = "ParticipantQ_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_R_0.8)[1] + coef(fit2_R_0.8)[2] * x) * 100, aes(color = "ParticipantR_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_R_1.2)[1] + coef(fit2_R_1.2)[2] * x) * 100, aes(color = "ParticipantR_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_S_0.8)[1] + coef(fit2_S_0.8)[2] * x) * 100, aes(color = "ParticipantS_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_S_1.2)[1] + coef(fit2_S_1.2)[2] * x) * 100, aes(color = "ParticipantS_1.2"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_T_0.8)[1] + coef(fit2_T_0.8)[2] * x) * 100, aes(color = "ParticipantT_0.8"), size = 1) +
  stat_function(fun = function(x) pnorm(coef(fit2_T_1.2)[1] + coef(fit2_T_1.2)[2] * x) * 100, aes(color = "ParticipantT_1.2"), size = 1) +
 scale_y_continuous(limits = c(0, 100)) +
 scale_x_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.2), labels = seq(0, 4, by = 0.2)) + # X軸を0から4、目盛りを0.2刻みに設定
 labs(x = "ハンドサイズ", y = "比較対象を重いと答えた割合[%]") +
 theme_minimal() +
 theme(
  plot.title = element_blank(),
  axis.title.x = element_text(size = 32), # X軸タイトルのフォントサイズ
  axis.title.y = element_text(size = 32), # Y軸タイトルのフォントサイズ
  axis.text.x = element_text(size = 20),  # X軸目盛りのフォントサイズ
  axis.text.y = element_text(size = 20),  # Y軸目盛りのフォントサイズ
  panel.grid.major.x = element_line(size = 0.5), # X軸補助線の表示を有効化
  panel.grid.minor.x = element_line(size = 0.25)  # X軸補助線の表示を有効化
 )

# p4を表示
print(p4)


# 各プロットを個別に表示
print(p1)
print(p2)
print(p3)
print(p4)